<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>
    <%= channel ? channel.channelName : "Channel Details" %>
  </title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="/css/channel-details.css" />
</head>

<body>
  <input type="hidden" id="selectedFgHex" value="#000000">
  <input type="hidden" id="selectedBgHex" value="#FFFFFF">
  <!-- This container will hold the QR code so it can be downloaded -->
  <div id="qr-download-container" style="display: none;"></div>


  <div class="container-channel-details">
    <% if (error) { %>
      <div class="error">
        <%= error %>
      </div>
      <% } %>

        <% if (channel && !error) { %>
          <div class="header-custom-channel-details">
            <h1>
              Channel Name: <%= channel.channelName %>
            </h1>
            <!-- <div class="status <%= channel.isRunning ? 'running' : 'stopped' %>">
              Status: <%= channel.isRunning ? "Running (" + channel.typeOfRunning + ")" : "Stopped" %>
            </div> -->
          </div>

          <div class="box-wrapper">
            <!-- Quiz Box -->
            <div class="type-box"
              onclick="location.href='/tvstation/channels/<%= channel._id %>/session/<%= sessionId %>/quiz'">
              <div class="type-icon">
                <!-- Quiz SVG: Question Bubble -->
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48" fill="#18024b">
                  <path
                    d="M12 2C6.48 2 2 5.92 2 10.5c0 2.32 1.23 4.41 3.22 5.91L4 22l5.22-3.06c.9.24 1.86.38 2.88.38 5.52 0 10-3.92 10-8.5S17.52 2 12 2zm-.25 13h1.5v1.5h-1.5V15zm2.66-5.38c-.41.5-1.14.94-1.31 1.88-.04.26-.05.43-.05.5h-1.5c0-.61.09-1.04.2-1.35.24-.65.84-1.17 1.26-1.51.46-.37.72-.69.72-1.14 0-.75-.58-1.25-1.44-1.25-.79 0-1.37.44-1.52 1.16l-1.45-.35C9.11 7.01 10.41 6 12.01 6c1.66 0 2.91 1.12 2.91 2.55 0 .69-.26 1.27-.5 1.57z" />
                </svg>
              </div>
              <div class="type-title">Quiz</div>
              <!-- <div class="status-bar">
                <div class="status-fill <%= channel.isRunning && channel.typeOfRunning === 'quiz' ? 'active' : '' %>">
                </div>
              </div>
              <button class="type-btn"
                onclick="toggleChannel('<%= channel._id %>', <%= channel.isRunning && channel.typeOfRunning === 'quiz' %>, 'quiz')">
                <%= channel.isRunning && channel.typeOfRunning==='quiz' ? 'Stop' : 'Start' %> Quiz
              </button> -->
            </div>

            <!-- Voting Box -->
            <div class="type-box" onclick="location.href='/tvstation/channels/<%= channel._id %>/voting'">
              <div class="type-icon">
                <!-- Voting SVG: Ballot Box -->
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48" fill="#18024b">
                  <path
                    d="M20 4H4c-1.1 0-2 .9-2 2v2h20V6c0-1.1-.9-2-2-2zm0 4H2v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8zm-8 5h-4v-2h4v2zm6-4h-10v-2h10v2z" />
                </svg>
              </div>
              <div class="type-title">Voting</div>
              <!-- <div class="status-bar">
                <div
                  class="status-fill voting <%= channel.isRunning && channel.typeOfRunning === 'voting' ? 'active' : '' %>">
                </div>
              </div>
              <button class="type-btn"
                onclick="toggleChannel('<%= channel._id %>', <%= channel.isRunning && channel.typeOfRunning === 'voting' %>, 'voting')">
                <%= channel.isRunning && channel.typeOfRunning==='voting' ? 'Stop' : 'Start' %> Voting
              </button> -->
            </div>

            <% if (channel.isRunning && channel.typeOfRunning) { %>
              <!-- Magic Code Download Box -->
              <div class="type-box">
                <div class="type-icon">
                  <!-- Magic Code SVG: QR Code -->
                  <svg xmlns="http://www.w3.org/2000/svg" fill="#18024b" viewBox="0 0 24 24" width="48" height="48">
                    <path
                      d="M3 3h8v8H3V3zm2 2v4h4V5H5zm10-2h6v6h-6V3zm2 2v2h2V5h-2zM3 13h8v8H3v-8zm2 2v4h4v-4H5zm10 0h2v2h-2v-2zm4 0h2v2h-2v-2zm-4 4h2v2h-2v-2zm4 0h2v2h-2v-2z" />
                  </svg>
                </div>
                <div class="type-title">Download Magic Code</div>
                <div class="status-bar">
                  <div class="status-fill active"></div>
                </div>




                <!-- Hidden fields for JS -->
                <input type="hidden" id="selectedFgHex" value="#000000" />
                <input type="hidden" id="selectedBgHex" value="#FFFFFF" />

                <!-- Foreground & Background Color Pickers -->
                <div class="form-group" id="foreground-color-setting-update" style="margin-top: 1rem;">
                  <label for="foreground-color-grid-update">Foreground Color</label>
                  <div class="color-grid" id="foreground-color-grid-update">
                    <% const fgColors=[ '#000000' , '#FFFFFF' , '#FF0093' , '#835EC7' , '#00B760' , '#FC70BA'
                      , '#1C00FF' , '#FF0000' , '#FFC62C' , '#00AEEF' , '#FEFE00' , '#4CCED1' ]; %>
                      <% fgColors.forEach(hex=> { %>
                        <div class="color-option"
                          style="background-color: <%= hex %>; <%= hex === '#ffffff' ? 'border: 1px solid #ccc;' : '' %>">
                        </div>
                        <% }) %>
                  </div>
                </div>

                <div class="form-group" id="background-color-setting-update">
                  <label for="background-color-grid-update">Background Color</label>
                  <div class="color-grid" id="background-color-grid-update">
                    <% fgColors.forEach(hex=> { %>
                      <div class="color-option"
                        style="background-color: <%= hex %>; <%= hex === '#ffffff' ? 'border: 1px solid #ccc;' : '' %>">
                      </div>
                      <% }) %>
                  </div>
                </div>
                <!-- Download Button -->
                <!-- <button class="type-btn" onclick="handleMagicCodeUpdate('<%= channel._id %>')">Update</button> -->

                <button class="type-btn" onclick="downloadMagicCode('<%= channel._id %>')">Download</button>

              </div>


              <% } %>


          </div>

          <% } %>
  </div>
</body>


<script>
  async function toggleChannel(channelId, isCurrentlyRunning, typeOfRunning) {
    const loader = document.getElementById("loader");
    loader.style.display = "flex"; // show loader
    try {
      const res = await fetch(`/tvstation/channels/${channelId}/toggle`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          isRunning: !isCurrentlyRunning,
          typeOfRunning,
        }),
      });

      const result = await res.json();

      if (result.type === "success") {
        showToast(result.message, "success");
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showToast(result.message || "Failed to update channel", "error");
      }
    } catch (err) {
      console.error("Toggle error:", err);
      showToast("Something went wrong", "error");
    }
    finally {
      loader.style.display = "none"; // hide loader after fetch is done
    }
  }
</script>


<script>
  const colorHexMapQuiz = {
    "#000000": "black",
    "#FFFFFF": "white",
    "#FF0093": "magenta",
    "#835EC7": "violet",
    "#00B760": "green",
    "#FC70BA": "pink",
    "#1C00FF": "blue",
    "#FF0000": "red",
    "#FFC62C": "orange",
    "#00AEEF": "cyan",
    "#FEFE00": "yellow",
    "#4CCED1": "turquoise"
  };

  const colorOptionsMap = {
    black: ["white", "pink", "orange", "yellow", "turquoise"],
    white: ["black", "green", "pink", "blue", "orange", "cyan", "yellow", "turquoise"],
    magenta: ["white", "cyan", "yellow", "turquoise"],
    violet: ["white", "cyan", "yellow", "turquoise"],
    green: ["white", "cyan", "yellow", "turquoise"],
    pink: ["white", "blue", "orange", "cyan", "yellow", "turquoise"],
    blue: ["white", "orange", "cyan", "yellow", "turquoise"],
    red: ["pink", "orange", "cyan", "yellow", "turquoise", "white"],
    orange: ["white", "pink", "cyan", "turquoise"],
    cyan: ["white", "black", "violet", "green", "pink", "blue", "orange", "yellow", "turquoise"],
    yellow: ["white", "black", "violet", "green", "pink", "blue", "orange", "cyan", "turquoise"],
    turquoise: ["white", "black", "violet", "green", "pink", "blue", "orange", "cyan", "yellow"]
  };

  const fgGrid = document.getElementById("foreground-color-grid-update");
  const bgGrid = document.getElementById("background-color-grid-update");
  const fgHexInput = document.getElementById("selectedFgHex");
  const bgHexInput = document.getElementById("selectedBgHex");

  function hexToName(hex) {
    return colorHexMapQuiz[hex.toUpperCase()] || null;
  }

  function clearActive(container) {
    container.querySelectorAll(".color-option").forEach(div => div.classList.remove("active"));
  }

  function rgbToHex(rgb) {
    const rgbArr = rgb.match(/\d+/g);
    if (!rgbArr || rgbArr.length < 3) return rgb;
    return "#" + rgbArr.map(val => parseInt(val).toString(16).padStart(2, '0')).join('').toUpperCase();
  }

  fgGrid.querySelectorAll(".color-option").forEach(fgDiv => {
    fgDiv.addEventListener("click", () => {
      clearActive(fgGrid);
      fgDiv.classList.add("active");

      const fgHex = rgbToHex(fgDiv.style.backgroundColor);
      const fgName = hexToName(fgHex);
      fgHexInput.value = fgHex;

      // Reset background selection
      clearActive(bgGrid);
      bgHexInput.value = "";

      // Show only allowed background options
      const allowed = colorOptionsMap[fgName] || [];
      bgGrid.querySelectorAll(".color-option").forEach(bgDiv => {
        const bgHex = rgbToHex(bgDiv.style.backgroundColor);
        const bgName = hexToName(bgHex);
        bgDiv.style.display = (allowed.includes(bgName) && bgName !== fgName) ? "inline-block" : "none";
      });
    });
  });

  bgGrid.querySelectorAll(".color-option").forEach(bgDiv => {
    bgDiv.addEventListener("click", () => {
      if (bgDiv.style.display === "none") return;
      clearActive(bgGrid);
      bgDiv.classList.add("active");

      const bgHex = rgbToHex(bgDiv.style.backgroundColor);
      bgHexInput.value = bgHex;
    });
  });
</script>


<script>
  async function handleMagicCodeUpdate(channelId) {
    const fgHex = document.getElementById("selectedFgHex").value;
    const bgHex = document.getElementById("selectedBgHex").value;

    const body = {};

    if (fgHex) body.qrDotColor = fgHex;
    if (bgHex) body.backgroundColor = bgHex;

    try {
      const res = await fetch(`/tvstation/channel/${channelId}/qr`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });

      const data = await res.json();

      if (data.success) {
        showToast("Magic code updated!", "success");
      } else {
        showToast(data.message || "Failed to update magic code", "error");
      }
    } catch (err) {
      console.error("QR update error:", err);
      showToast("Something went wrong", "error");
    }
  }
</script>



<script>
  async function downloadMagicCode(channelId) {
    const fgHex = document.getElementById("selectedFgHex").value;
    const bgHex = document.getElementById("selectedBgHex").value;

    try {
      // Fetch QR data from server
      const res = await fetch(`/tvstation/channel/${channelId}/qr`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ qrDotColor: fgHex, backgroundColor: bgHex }),
      });

      const data = await res.json();
      if (!data.success) {
        showToast(data.message || "Failed to fetch QR data", "error");
        return;
      }



      const qrData = data.qr;
      const qrUrl = qrData.redirectUrl;
      const qrCode = new QRCodeStyling({
        width: 16000,
        height: 16000,
        type: "canvas",
        data: qrUrl,
        dotsOptions: {
          color: qrData.qrDotColor || "#000000",
          type: qrData.dotStyle || "square",
          gradient: qrData.applyGradient === "linear" ? {
            type: "linear",
            colorStops: [
              { offset: 0, color: "#ff0000" },
              { offset: 1, color: qrData.qrDotColor || "#000000" }
            ]
          } : qrData.applyGradient === "radial" ? {
            type: "radial",
            colorStops: [
              { offset: 0, color: "#ff0000" },
              { offset: 1, color: qrData.qrDotColor || "#000000" }
            ]
          } : null
        },
        backgroundOptions: {
          color: qrData.backgroundColor || "#FFFFFF"
        },
        cornersSquareOptions: {
          type: qrData.cornerStyle || "square"
        },
        image: qrData.logo ? `${window.location.origin}/${qrData.logo}` : "",
        imageOptions: {
          crossOrigin: "anonymous",
          margin: 10
        }
      });

      const container = document.getElementById("qr-download-container");
      container.innerHTML = ""; // clear previous

      await qrCode.append(container);
      setTimeout(() => {
        qrCode.download({ name: "magic-code", extension: "png", width: 1600, height: 1600 });
      }, 500); // wait a little for QR to render
    } catch (error) {
      console.error("Download error:", error);
      showToast("Error downloading magic code", "error");
    }
  }
</script>







</html>