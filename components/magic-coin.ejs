<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Subscription Plans</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="/css/magic-plans.css" rel="stylesheet">
</head>

<body>
    <div class="container" style="margin-top: 10px;">
        <div class="container-custom-wallet">
            <span class="label">Total Coins</span>
            <div class="wallet-balance" id="walletBalance">
                <%= totalMagicCoins %> Magic Coins
            </div>
        </div>

        <div class="plans">
            <% plans.forEach(plan=> {
                const sanitizedId = plan.encryptedId.replace(/[^a-zA-Z0-9-_]/g, ""); // Remove special
                %>

                <div class="plan-card">
                    <div class="plan-price" id="plan-price-<%= sanitizedId %>">
                        <%= plan.price %>
                            <%= plan.currency || "CHF" %>
                    </div>

                    <div class="plan-coins">
                        <%= plan.coinsOffered %> Magic Coins
                    </div>
                    <div id="paypal-button-container-<%= sanitizedId %>" class="paypal-button-container"
                        style="margin-top: 20px;" data-plan-id="<%= plan.encryptedId %>">

                    </div>
                </div>
                <% }) %>
        </div>
    </div>

    <div class="transaction-bar" style="margin-top: 40px;">
        <h3 class="transaction-heading">Magic Coin Transaction History</h3>
        <div class="transaction-list" id="transactionList">
            <% if (transactionHistory && transactionHistory.length> 0) { %>
                <div class="transaction-item header">
                    <span>Coin</span>
                    <span>Type</span>
                    <span>Date</span>
                </div>
                <% transactionHistory.forEach(tx=> {
                    const formattedDate = new Date(tx.createdAt).toLocaleString("en-GB", {
                    day: '2-digit', month: '2-digit', year: 'numeric',
                    hour: '2-digit', minute: '2-digit'
                    });
                    let amountClass = '';
                    let typeText = '';
                    let typeBadgeClass = '';
                    let coinSymbol = ''; // + or -

                    // Set classes and text based on status
                    if (tx.paymentStatus === 'completed') {
                    typeText = 'GAINED';
                    typeBadgeClass = 'badge-added';
                    coinSymbol = '+';
                    }

                    else if (tx.paymentStatus === 'deducted') {
                    typeText = 'USED';
                    typeBadgeClass = 'badge-deducted';
                    coinSymbol = '-';
                    }
                    else if (tx.paymentStatus === 'denied' || tx.paymentStatus === 'failed') {
                    typeText = 'Failed';
                    typeBadgeClass = 'badge-failed';
                    }

                    else {
                    typeText = 'Pending';
                    typeBadgeClass = 'badge-pending';
                    }
                    %>
                    <div class="transaction-item">
                        <span
                            class="transaction-balance <%= typeText === 'Added' ? 'balance-added' : 'balance-deducted' %>">
                            <%= coinSymbol %>
                                <%= tx.coinsOffered %>
                                    <span class="coin-badge">ðŸª™</span>
                        </span>

                        <span class="transaction-type">
                            <span class="type-badge <%= typeBadgeClass %>">
                                <%= typeText %>
                            </span>
                        </span>

                        <span class="transaction-date">
                            <%= formattedDate %>
                        </span>
                    </div>
                    <% }) %>
                        <% } else { %>
                            <div class="transaction-item">
                                <span class="no-transactions">No transactions available.</span>
                            </div>
                            <% } %>
        </div>
        <% if (hasMore) { %>
            <button id="loadMoreBtn">Load More</button>
            <% } %>
    </div>





</body>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
<script src="/js/toastify-setup.js"></script>
<script
    src="https://www.paypal.com/sdk/js?client-id=AeUlyT2WmljAHqGaXytGewyz61xmfAJ4woW1wA_2TwjcaqbbjJTkPHy47FsEJhcH68BGlm9-AdDfmbrU&currency=CHF"></script>
<!-- <script src="/js/plan.js"></script> -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const containers = document.querySelectorAll(".paypal-button-container");
        // Initialize the global object to store meta tokens if not already present
        window.paypalMetaTokens = window.paypalMetaTokens || {};


        containers.forEach(container => {
            const planId = container.dataset.planId;
            const sanitizedId = container.id.replace("paypal-button-container-", "");
            // Get the related coupon input field using the plan ID
            const couponInput = document.querySelector(`#coupon-code-${sanitizedId}`);

            paypal.Buttons({
                createOrder: function () {
                    return fetch("/paypal/create-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ planId, isMagicPlan: true })
                    })
                        .then(async res => {
                            if (!res.ok) {
                                const errorData = await res.json();
                                console.log(errorData)
                                throw new Error(errorData.error || "Failed to create order");
                            }
                            return res.json();
                        })
                        .then(data => {
                            // Check if a success message exists
                            if (data.message) {
                                // Show success message
                                showToast(data.message, "success");
                                if (couponInput) couponInput.value = ""; // Clear the coupon input
                                // Reload the page after 3 seconds (to allow time for the toast to show)
                                setTimeout(() => {
                                    location.reload(); // Reload the page
                                }, 2000); // 3000 ms (3 seconds) delay before reload

                            }
                            // Store metaToken indexed by order ID for later use in capture
                            if (data.id && data.metaToken) {
                                window.paypalMetaTokens[data.id] = data.metaToken;
                            }
                            return data.id;
                        })
                        .catch(err => {
                            console.error("Create Order Error:", err);
                            showToast(err.message || "An error occurred while creating the order", "error");
                            if (couponInput) couponInput.value = ""; // Clear the coupon input
                            throw err; // rethrow so PayPal knows it failed
                        });
                },
                onApprove: function (data) {
                    const metaToken = window.paypalMetaTokens[data.orderID];
                    return fetch("/paypal/capture-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            orderID: data.orderID,
                            planId,
                            metaToken,
                            isMagicPlan: true
                        })
                    })
                        .then(res => res.json())
                        .then(response => {
                            // Clear the metaToken no matter what
                            delete window.paypalMetaTokens[data.orderID];
                            if (response.status === 'COMPLETED') {

                                if (response.transactionId) {
                                    if (couponInput) couponInput.value = ""; // Clear the coupon input
                                    // âœ… Redirect to success page with transaction ID
                                    const type = "magic"; // or whatever type you need
                                    window.location.href = `/successpayment?session_id=${response.transactionId}&type=${type}`
                                } else {
                                    alert("Transaction ID not found.");
                                }
                            } else {
                                showToast(response.error, "error");
                                setTimeout(() => {
                                    window.location.href = `/cancel`;
                                }, 1000); // 1000 milliseconds = 1 second delay
                            }
                        });
                },
                onError: function (err) {
                    // Also clear in case of error to avoid memory leaks
                    delete window.paypalMetaTokens[data.orderID];
                    console.log(err)
                    console.error("PayPal Button Error:", err);
                    // showToast("An error occurred during the transaction.", "error");
                }
            }).render(container);
        });
    });


    let skipCount = <%= transactionHistory.length %>; // can keep if first batch is correct


    const loadMoreBtn = document.getElementById("loadMoreBtn");
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", async () => {
            try {
                loadMoreBtn.disabled = true;
                loadMoreBtn.textContent = "Loading...";

                // Use limit of 5, as in your original JS.
                const response = await fetch(`/magic-coin-wallet?skip=${skipCount}&limit=5`, {
                    headers: { Accept: "application/json" }
                });
                const data = await response.json();

                data.transactionHistory.forEach((tx) => {
                    const item = document.createElement("div");
                    item.className = "transaction-item";

                    const formattedDate = new Date(tx.createdAt).toLocaleString("en-GB", {
                        day: '2-digit', month: '2-digit', year: 'numeric',
                        hour: '2-digit', minute: '2-digit'
                    });

                    let amountClass = '';
                    let typeText = '';
                    let typeBadgeClass = '';
                    let coinSymbol

                    // Match the backend logic for paymentStatus
                    if (tx.paymentStatus === 'completed') {
                        amountClass = 'balance-added';
                        typeText = 'GAINED';
                        typeBadgeClass = 'badge-added';
                        coinSymbol = '+';
                    } else if (tx.paymentStatus === 'denied' || tx.paymentStatus === 'failed') {
                        amountClass = 'negative';
                        typeText = 'Failed';
                        typeBadgeClass = 'badge-failed';

                    }

                    else if (tx.paymentStatus === 'deducted') {
                        amountClass = 'balance-deducted';
                        typeText = 'USED';
                        coinSymbol = '-';
                        typeBadgeClass = 'badge-deducted';
                    } else {
                        amountClass = '';
                        typeText = 'Pending';
                        typeBadgeClass = 'badge-pending';
                    }
                    item.innerHTML = `
    <span class="transaction-balance ${amountClass}">
        ${coinSymbol}${tx.coinsOffered}
        <span class="coin-badge">ðŸª™</span>
    </span>
    <span class="transaction-type">
        <span class="type-badge ${typeBadgeClass}">${typeText}</span>
    </span>     
    <span class="transaction-date">
        ${formattedDate}
    </span>
`;

                    document.getElementById("transactionList").appendChild(item);
                });

                skipCount += data.transactionHistory.length;

                if (!data.hasMore) {
                    loadMoreBtn.remove();
                } else {
                    loadMoreBtn.disabled = false;
                    loadMoreBtn.textContent = "Load More";
                }
            } catch (err) {
                console.error("Load more failed", err);
                loadMoreBtn.disabled = false;
                loadMoreBtn.textContent = "Load More"; // Re-enable button on error
            }
        });
    }

</script>






</html>