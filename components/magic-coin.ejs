<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Subscription Plans</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="/css/magic-plans.css" rel="stylesheet">
</head>

<body>
    <div class="container" style="margin-top: 10px;">
        <div class="container-custom-wallet">
            <span class="label">Total Coins</span>
            <div class="wallet-balance" id="walletBalance">
                <%= totalMagicCoins %> Magic Coins
            </div>
        </div>

        <div class="plans">
            <% plans.forEach(plan=> {
                const sanitizedId = plan.encryptedId.replace(/[^a-zA-Z0-9-_]/g, ""); // Remove special
                %>

                <div class="plan-card">
                    <div class="plan-price" id="plan-price-<%= sanitizedId %>">
                        <%= plan.price %>
                            <%= plan.currency || "CHF" %>
                    </div>

                    <div class="plan-coins">
                        <%= plan.coinsOffered %> Magic Coins
                    </div>
                    <div id="paypal-button-container-<%= sanitizedId %>" class="paypal-button-container"
                        style="margin-top: 20px;" data-plan-id="<%= plan.encryptedId %>">

                    </div>
                </div>
                <% }) %>
        </div>
    </div>




</body>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
<script src="/js/toastify-setup.js"></script>
<script
    src="https://www.paypal.com/sdk/js?client-id=AeUlyT2WmljAHqGaXytGewyz61xmfAJ4woW1wA_2TwjcaqbbjJTkPHy47FsEJhcH68BGlm9-AdDfmbrU&currency=CHF"></script>
<!-- <script src="/js/plan.js"></script> -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const containers = document.querySelectorAll(".paypal-button-container");
        // Initialize the global object to store meta tokens if not already present
        window.paypalMetaTokens = window.paypalMetaTokens || {};


        containers.forEach(container => {
            const planId = container.dataset.planId;
            const sanitizedId = container.id.replace("paypal-button-container-", "");
            // Get the related coupon input field using the plan ID
            const couponInput = document.querySelector(`#coupon-code-${sanitizedId}`);

            paypal.Buttons({
                createOrder: function () {
                    return fetch("/paypal/create-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ planId, isMagicPlan: true })
                    })
                        .then(async res => {
                            if (!res.ok) {
                                const errorData = await res.json();
                                console.log(errorData)
                                throw new Error(errorData.error || "Failed to create order");
                            }
                            return res.json();
                        })
                        .then(data => {
                            // Check if a success message exists
                            if (data.message) {
                                // Show success message
                                showToast(data.message, "success");
                                if (couponInput) couponInput.value = ""; // Clear the coupon input
                                // Reload the page after 3 seconds (to allow time for the toast to show)
                                setTimeout(() => {
                                    location.reload(); // Reload the page
                                }, 2000); // 3000 ms (3 seconds) delay before reload

                            }
                            // Store metaToken indexed by order ID for later use in capture
                            if (data.id && data.metaToken) {
                                window.paypalMetaTokens[data.id] = data.metaToken;
                            }
                            return data.id;
                        })
                        .catch(err => {
                            console.error("Create Order Error:", err);
                            showToast(err.message || "An error occurred while creating the order", "error");
                            if (couponInput) couponInput.value = ""; // Clear the coupon input
                            throw err; // rethrow so PayPal knows it failed
                        });
                },
                onApprove: function (data) {
                    const metaToken = window.paypalMetaTokens[data.orderID];
                    return fetch("/paypal/capture-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            orderID: data.orderID,
                            planId,
                            metaToken,
                            isMagicPlan: true
                        })
                    })
                        .then(res => res.json())
                        .then(response => {
                            // Clear the metaToken no matter what
                            delete window.paypalMetaTokens[data.orderID];
                            if (response.status === 'COMPLETED') {

                                if (response.transactionId) {
                                    if (couponInput) couponInput.value = ""; // Clear the coupon input
                                    // âœ… Redirect to success page with transaction ID
                                    const type = "magic"; // or whatever type you need
                                    window.location.href = `/successpayment?session_id=${response.transactionId}&type=${type}`
                                } else {
                                    alert("Transaction ID not found.");
                                }
                            } else {
                                showToast(response.error, "error");
                                setTimeout(() => {
                                    window.location.href = `/cancel`;
                                }, 1000); // 1000 milliseconds = 1 second delay
                            }
                        });
                },
                onError: function (err) {
                    // Also clear in case of error to avoid memory leaks
                    delete window.paypalMetaTokens[data.orderID];
                    console.log(err)
                    console.error("PayPal Button Error:", err);
                    // showToast("An error occurred during the transaction.", "error");
                }
            }).render(container);
        });
    });
</script>




</html>