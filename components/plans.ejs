<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Subscription Plans</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="/css/plans.css" rel="stylesheet">
</head>

<body>
    <div class="container" style="margin-top: 10px;">
        <!-- <h1>Choose Your Subscription</h1> -->

        <div class="tabs">
            <% if (user?.subscription?.isVip) { %>
                <div class="tab active" id="current-subscription-tab">VIP Subscription</div>
                <% } else { %>
                    <div class="tab active" id="plans-tab">Subscription Plans</div>
                    <div class="tab" id="current-subscription-tab">Current Subscription</div>
                    <% } %>
        </div>
  <% if (!user?.subscription?.isVip) { %>
        <div class="tab-content active" id="plans-tab-content">
            <div class="plans">
                <% plans.forEach(plan=> {
                    const sanitizedId = plan.encryptedId.replace(/[^a-zA-Z0-9-_]/g, ""); // Remove special characters
                    %>
                    <div class="plan-card">
                        <div class="plan-duration">
                            <%= plan.duration %>
                        </div>
                        <div class="plan-price" id="plan-price-<%= sanitizedId %>">
                            <%= plan.price %>
                                <%= plan.currency %>
                        </div>
                        <ul class="features">
                            <% plan.features.forEach(feature=> { %>
                                <li>
                                    <%= feature %>
                                </li>
                                <% }); %>
                        </ul>
                        <!-- âœ… Coupon Code Input -->
                        <div class="coupon-section" style="margin-bottom: 10px; display: none;">
                            <input type="text" class="coupon-input" placeholder="Enter coupon code"
                                id="coupon-code-<%= sanitizedId %>" />
                        </div>
                        <button id="add-coupon-button-<%= plan.encryptedId %>" class="subscribe-btn add-coupon-btn"
                            data-plan-id="<%= plan.encryptedId %>" style="margin-bottom: 10px;">
                            Add Coupon
                        </button>
                        <div id="coupon-success-message-<%= plan.encryptedId %>" style=" display: none;"
                            class="coupon-success-message">
                            Coupon Added
                        </div>
                        <div>
                            <!-- <button id="checkout-button-<%= plan.encryptedId %>" class="checkout-btn subscribe-btn">
                                Pay with Credit Card
                            </button> -->
                            <div id="paypal-button-container-<%= sanitizedId %>" class="paypal-button-container"
                                style="margin-top: 20px;" data-plan-id="<%= plan.encryptedId %>">

                            </div>
                        </div>
                    </div>
                    <% }); %>
            </div>
        </div>
          <% } %>

      <div class="tab-content <%= user?.subscription?.isVip ? 'active' : '' %>" id="current-subscription-tab-content">
            <% if (user?.subscription?.isVip) { %>
                <div class="subscription-card">
                    <div class="status-badge active">VIP Subscription</div>
                    <div class="subscription-details">
                        <p><i class="fas fa-user"></i> <strong>Name :&nbsp;</strong>
                            <%= user.name %>
                        </p>
                        <p><i class="fas fa-envelope"></i> <strong>Email :&nbsp;</strong>
                            <%= user.email %>
                        </p>
                        <p><i class="fas fa-calendar-alt"></i> <strong>Valid Until&nbsp;:&nbsp;</strong>
                            <% if (user.subscription.validUntilVip) { const vipDate=new
                                Date(user.subscription.validUntilVip); const
                                dd=String(vipDate.getDate()).padStart(2, '0' ); const mm=String(vipDate.getMonth() +
                                1).padStart(2, '0' ); const yy=vipDate.getFullYear(); %>
                                <%= `${dd}-${mm}-${yy}` %>
                                    <% } else { %>
                                        N/A
                                        <% } %>
                        </p>
                    </div>
                </div>
                <% } else { %>
                    <div class="subscription-card">
                        <% if (new Date(user.validUntil) < new Date()) { %>
                            <div class="status-badge expired">No Active Subscription</div>
                            <p class="no-subscription-message">Subscribe now to enjoy premium features.</p>
                            <% } else { %>
                                <div class="status-badge active">Active Subscription</div>
                                <div class="subscription-details">
                                    <p><i class="fas fa-user"></i> <strong>Name :&nbsp;</strong>
                                        <%= user.name %>
                                    </p>
                                    <p><i class="fas fa-envelope"></i> <strong>Email :&nbsp;</strong>
                                        <%= user.email %>
                                    </p>
                                    <p><i class="fas fa-calendar-alt"></i> <strong>Valid Until&nbsp;:&nbsp;</strong>
                                        <% if (user.validUntil) { const date=new Date(user.validUntil); const
                                            dd=String(date.getDate()).padStart(2, '0' ); const mm=String(date.getMonth()
                                            + 1).padStart(2, '0' ); const yy=date.getFullYear(); %>
                                            <%= `${dd}-${mm}-${yy}` %>
                                                <% } else { %>
                                                    N/A
                                                    <% } %>
                                    </p>
                                    <p><i class="fas fa-clock"></i> <strong>Time Remaining&nbsp;:&nbsp;</strong> <span
                                            id="time-remaining">Loading...</span></p>
                                </div>
                                <% } %>
                    </div>
                    <% } %>
        </div>
    </div>



</body>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
<script src="/js/toastify-setup.js"></script>
<script src="https://js.stripe.com/v3/"></script>
<script
    src="https://www.paypal.com/sdk/js?client-id=ARlL9iKwH-ib4SALn8uUCwXs7yMUdALrHPYk8_5l6uETER8_3fMGUb3Fc0ulLyWA-LAlGFdFxtSXXEcQ&currency=CHF"></script>
<script src="/js/plan.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const containers = document.querySelectorAll(".paypal-button-container");
        // Initialize the global object to store meta tokens if not already present
        window.paypalMetaTokens = window.paypalMetaTokens || {};


        containers.forEach(container => {
            const planId = container.dataset.planId;
            const sanitizedId = container.id.replace("paypal-button-container-", "");
            // Get the related coupon input field using the plan ID
            const couponInput = document.querySelector(`#coupon-code-${sanitizedId}`);

            paypal.Buttons({
                createOrder: function () {
                    const couponCode = couponInput ? couponInput.value.trim() : "";
                    return fetch("/paypal/create-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ planId, couponCode })
                    })
                        .then(async res => {
                            if (!res.ok) {
                                const errorData = await res.json();
                                throw new Error(errorData.message || "Failed to create order");
                            }
                            return res.json();
                        })
                        .then(data => {
                            // Check if a success message exists
                            if (data.message) {
                                // Show success message
                                showToast(data.message, "success");
                                if (couponInput) couponInput.value = ""; // Clear the coupon input
                                // Reload the page after 3 seconds (to allow time for the toast to show)
                                setTimeout(() => {
                                    location.reload(); // Reload the page
                                }, 2000); // 3000 ms (3 seconds) delay before reload

                            }
                            // Store metaToken indexed by order ID for later use in capture
                            if (data.id && data.metaToken) {
                                window.paypalMetaTokens[data.id] = data.metaToken;
                            }
                            return data.id;
                        })
                        .catch(err => {
                            console.error("Create Order Error:", err);
                            showToast(err.message || "An error occurred while creating the order", "error");
                            if (couponInput) couponInput.value = ""; // Clear the coupon input
                            throw err; // rethrow so PayPal knows it failed
                        });
                },
                onApprove: function (data) {
                    const metaToken = window.paypalMetaTokens[data.orderID];
                    return fetch("/paypal/capture-order", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            orderID: data.orderID,
                            planId,
                            metaToken,
                        })
                    })
                        .then(res => res.json())
                        .then(response => {
                            // Clear the metaToken no matter what
                            delete window.paypalMetaTokens[data.orderID];
                            if (response.status === 'COMPLETED') {
                                if (response.transactionId) {
                                    if (couponInput) couponInput.value = ""; // Clear the coupon input
                                    // âœ… Redirect to success page with transaction ID
                                    window.location.href = `/successpayment?session_id=${response.transactionId}`;
                                } else {
                                    alert("Transaction ID not found.");
                                }
                            } else {
                                showToast(response.message, "error");
                                setTimeout(() => {
                                    window.location.href = `/cancel`;
                                }, 1000); // 1000 milliseconds = 1 second delay
                            }
                        });
                },
                onError: function (err) {
                    // Also clear in case of error to avoid memory leaks
                    delete window.paypalMetaTokens[data.orderID];
                    console.log(err)
                    console.error("PayPal Button Error:", err);
                    // showToast("An error occurred during the transaction.", "error");
                }
            }).render(container);
        });
    });
</script>


<script>// Update remaining time
    function formatTime(milliseconds) {
        let seconds = Math.floor(milliseconds / 1000);
        let minutes = Math.floor(seconds / 60);
        let hours = Math.floor(minutes / 60);
        let days = Math.floor(hours / 24);

        seconds %= 60;
        minutes %= 60;
        hours %= 24;

        let timeString = "";
        if (days > 0) timeString += `${days} days `;
        if (hours > 0) timeString += `${hours} hours `;
        if (minutes > 0) timeString += `${minutes} minutes `;
        if (seconds > 0) timeString += `${seconds} seconds`;
        return timeString;
    }

    function updateTimeRemaining() {
        const validUntil = new Date("<%= user.validUntil %>");
        const now = new Date();
        const timeRemaining = validUntil - now;

        if (timeRemaining <= 0) {
            document.getElementById("time-remaining").textContent =
                "Subscription expired";
        } else {
            document.getElementById("time-remaining").textContent =
                formatTime(timeRemaining);
        }
    }

    setInterval(updateTimeRemaining, 1000);

    // Tab toggle
    const tabs = document.querySelectorAll(".tab");
    const contents = document.querySelectorAll(".tab-content");

    tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
            tabs.forEach((t) => t.classList.remove("active"));
            contents.forEach((c) => c.classList.remove("active"));
            tab.classList.add("active");

            const target = document.getElementById(tab.id + "-content");
            if (target) target.classList.add("active");
        });
    });
</script>

</html>