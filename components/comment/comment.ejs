<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Comment Management</title>
    <link rel="stylesheet" href="/css/channel-quiz.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet" />
</head>

<body>
    <div class="quiz-admin-container">
        <% if (error) { %>
            <div class="quiz-admin-error">
                <%= error %>
            </div>
            <% } else { %>

                <nav class="breadcrumbs">
                    <a href="/tvstation/channels">Projects</a>
                    <span>&rsaquo;</span>
                    <a href="/tvstation/channels/<%= channelId %>/sessions">Episodes</a>
                    <span>&rsaquo;</span>
                    <a href="/tvstation/channels/<%= channelId %>/session/<%= sessionId %>">Events</a>
                    <span>&rsaquo;</span>
                    <span class="active">Comment</span>
                </nav>
                <div class="quiz-admin-header">
                    <h1>
                        <%= channel && channel.channelName ? channel.channelName + ' ' : '' %>
                            <span>&rsaquo;</span>
                            <%= session && session.name ? session.name + ' ' : '' %>
                                <span>&rsaquo;Comment Manager
                    </h1>
                    <div class="quiz-admin-controls">
                        <% if (!quizQuestions || quizQuestions.length===0) { %>
                            <button
                                onclick="window.open('/tvstation/comment/channels/<%= channelId %>/session/<%= sessionId %>/addcommentquestion', '_blank')"
                                class="btn">
                                + Create a New Comment Event
                            </button>
                            <% } %>
                                <!-- <button id="startChannelBtn" class="start-btn btn">
                            <%= channel.isRunning && channel.typeOfRunning==="quiz" ? "Stop" : "Start" %>
                        </button> -->
                                <!-- <button class="winner-btn btn"
                                    onclick="window.open('/tvstation/channels/<%= channelId %>/session/<%= sessionId %>/quiz/drawwinner', '_blank')">Draw
                                    Winner</button> -->
                                <button class="logs-btn btn"
                                    onclick="location.href='/tvstation/comment/channel/<%= channelId %>/session/<%= sessionId %>/comment-response-tracker'">Track
                                    Logs</button>
                    </div>
                </div>

                <div class="quiz-admin-questions">
                    <% if (quizQuestions && quizQuestions.length> 0) { %>
                        <% quizQuestions.forEach((q, index)=> { %>
                            <div class="quiz-admin-question-card">
                                <div class="quiz-admin-question-text">
                                    <%= q.question %>
                                </div>
                                <% if (q.questionImage) { %>
                                    <div class="quiz-admin-question-image" style="margin-top: 8px;">
                                        <img src="<%= q.questionImage %>" alt="Question Image"
                                            style="max-width: 150px; height: auto; border-radius: 4px;" />
                                    </div>
                                    <% } %>
                                        <div class="quiz-admin-info">
                                            <% q.options.forEach((opt, optIndex)=> { %>
                                                <span style="display: block; margin-bottom: 5px;">
                                                    <strong>
                                                        <%= String.fromCharCode(65 + optIndex) %>.
                                                    </strong>
                                                    <%= opt.text %>
                                                </span>
                                                <% }) %>
                                        </div>
                                        <div class="quiz-admin-actions">
                                            <a href="/tvstation/comment/channels/<%= channelId %>/session/<%= sessionId %>/editquestion/<%= q._id %>"
                                                target="_blank">
                                                <button>Edit</button>
                                            </a>
                                            <button class="delete-btn delete"
                                                data-question-id="<%= q._id %>">Delete</button>
                                        </div>
                                        <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap;"
                                            id="quiz-admin-actions-parent-div">

                                            <div class="quiz-new-actions">
                                                <button class="btn open-app-quiz"
                                                    style="padding: 7px 12px; border-radius: 4px;"
                                                    data-question-id="<%= q._id %>"
                                                    onclick="window.open('/tvstation/comment/channels/<%= channelId %>/session/<%= sessionId %>/comment-play/?lang=en', '_blank')">Open
                                                    Front Screen</button>
                                                <button class="btn" id="toggleMagicUpdateBtn"
                                                    style="padding: 7px 12px; border-radius: 4px;"
                                                    data-question-id="<%= q._id %>">Open Magic Code</button>
                                                <button class="btn" id="linkWithMagicCodeBtn"
                                                    style="padding: 7px 12px; border-radius: 4px;"
                                                    data-question-id="<%= q._id %>"
                                                    onclick="window.location.href='/authenticateqr?sessionId=<%= sessionId %>&channelId=<%= channelId %>&type=comment&linked=true'">
                                                    Send to a Magic Code
                                                </button>
                                                <button class="btn" style="padding: 7px 12px; border-radius: 4px;"
                                                    data-question-id="<%= q._id %>" id="unlinkBtn">Unsend</button>

                                                <button class="btn"
                                                    style="padding: 7px 12px; border-radius: 4px; display: none;"
                                                    id="linkNewMagicCode" data-question-id="<%= q._id %>"
                                                    onclick="window.location.href='/dashboard?sessionId=<%= sessionId %>&channelId=<%= channelId %>&type=comment&linked=true'">
                                                    Send to New Magic Code
                                                </button>


                                                <button class="type-btn btn"
                                                    style="padding: 7px 12px; border-radius: 4px;"
                                                    onclick="downloadMagicCode('<%= channelId %>', '<%= sessionId %>')"
                                                    id="download-qr-code-btn">Download</button>

                                                <!-- Placeholder for Copy Link -->
                                                <button class="btn copy-qr-link-btn" data-question-id="<%= q._id %>"
                                                    style="padding: 7px 12px; border-radius: 4px;">Copy Link</button>
                                            </div>
                                        </div>
                            </div>
                            <% }) %>
                                <% } else { %>
                                    <p style="padding: 1rem;">No Comment Event available.</p>
                                    <% } %>
                </div>
                <% if (hasMore) { %>
                    <div class="quiz-admin-load" id="loadMoreContainer">
                        <button id="loadMoreBtn">Load More</button>
                        <div id="loadingText"
                            style="display: none; text-align: center; margin-top: 10px; font-weight: 500;">
                            Loading...
                        </div>
                    </div>
                    <% } %>

                        <script>

                            let skipCount = <%= quizQuestions.length %>;
                            const channelId = "<%= channelId %>";

                            const loadMoreBtn = document.getElementById("loadMoreBtn");
                            const loadingText = document.getElementById("loadingText");

                            if (loadMoreBtn) {
                                loadMoreBtn.addEventListener("click", async () => {
                                    try {
                                        loadMoreBtn.style.display = "none";
                                        loadingText.style.display = "block";

                                        const res = await fetch(`/tvstation/channels/${channelId}/quiz?skip=${skipCount}&limit=5`, {
                                            headers: {
                                                Accept: "application/json"
                                            }
                                        });

                                        const json = await res.json();

                                        if (json.type === "success" && Array.isArray(json.data)) {
                                            const container = document.querySelector(".quiz-admin-questions");

                                            json.data.forEach((q) => {
                                                const div = document.createElement("div");
                                                div.className = "quiz-admin-question-card";
                                                div.innerHTML = `
                            <div class="quiz-admin-question-text">${q.question}</div>
                            <div class="quiz-admin-info">
                                <span><strong>Correct Answer:</strong> ${String.fromCharCode(65 + q.correctAnswerIndex)}</span>
                                <span><strong>Magic Coins:</strong> ${q.rewardCoins || 0}</span>
                            </div>
                            <div class="quiz-admin-actions">
                               <a href="/tvstation/channels/${channelId}/editquestion/${q._id}" target="_blank">
                                    <button>Edit</button>
                                </a>
                               <button class="delete-btn delete" data-question-id="${q._id}">Delete</button>
                            </div>
                        `;
                                                container.appendChild(div);
                                            });

                                            skipCount += json.data.length;

                                            if (!json.hasMore || json.data.length < 5) {
                                                document.getElementById("loadMoreContainer").style.display = "none";
                                            } else {
                                                loadMoreBtn.style.display = "inline-block";
                                            }
                                        }
                                    } catch (err) {
                                        console.error("Load more failed", err);
                                        alert("Failed to load more questions.");
                                        loadMoreBtn.style.display = "inline-block";
                                    } finally {
                                        loadingText.style.display = "none";
                                    }
                                });
                            }


                            document.addEventListener("click", async (e) => {
                                if (e.target.classList.contains("delete-btn")) {
                                    const button = e.target;
                                    const questionId = button.getAttribute("data-question-id");

                                    if (!confirm("Are you sure you want to delete this question?")) return;
                                    const loader = document.getElementById("loader");
                                    loader.style.display = "flex"; // show loader
                                    try {
                                        const res = await fetch(`/tvstation/comment/${questionId}`, {
                                            method: "DELETE",
                                            headers: {
                                                "Content-Type": "application/json"
                                            },
                                            body: JSON.stringify({
                                                channelId: "<%= channelId %>"
                                            })
                                        });

                                        const result = await res.json();

                                        if (result.type === "success") {
                                            showToast(result.message || "Question deleted successfully", "success");
                                            setTimeout(() => {
                                                location.reload();
                                            }, 1000); // Reload after 1 second

                                        } else {
                                            showToast(result.message || "Failed to delete the question", "error");
                                        }
                                    } catch (err) {
                                        console.error("Delete failed", err);
                                        showToast("Server error while deleting the question", "error");
                                    }

                                    finally {
                                        loader.style.display = "none";
                                    }
                                }
                            });
                        </script>
                        <div id="magicCodeSection">
                            <h1>Magic Code</h1>
                            <div class="quiz-admin-question-card app-qr-box quiz-admin-questions">
                                <div id="qr-download-container" style="display: none;"></div>
                                <!-- Magic Code Download Box -->
                                <div class="type-box">
                                    <!-- Hidden fields for JS -->
                                    <input type="hidden" id="selectedFgHex" value="#000000" />
                                    <input type="hidden" id="selectedBgHex" value="#FFFFFF" />

                                    <!-- Foreground & Background Color Pickers -->
                                    <div class="form-group" id="foreground-color-setting-update"
                                        style="margin-top: 1rem;">
                                        <label for="foreground-color-grid-update">Foreground Color</label>
                                        <div class="color-grid" id="foreground-color-grid-update">
                                            <% const fgColors=[ '#000000' , '#FFFFFF' , '#FF0093' , '#835EC7'
                                                , '#00B760' , '#FC70BA' , '#1C00FF' , '#FF0000' , '#FFC62C' , '#00AEEF'
                                                , '#FEFE00' , '#4CCED1' ]; %>
                                                <% fgColors.forEach(hex=> { %>
                                                    <div class="color-option"
                                                        style="background-color: <%= hex %>; <%= hex === '#ffffff' ? 'border: 1px solid #ccc;' : '' %>">
                                                    </div>
                                                    <% }) %>
                                        </div>
                                    </div>

                                    <div class="form-group" id="background-color-setting-update">
                                        <label for="background-color-grid-update">Background Color</label>
                                        <div class="color-grid" id="background-color-grid-update">
                                            <% fgColors.forEach(hex=> { %>
                                                <div class="color-option"
                                                    style="background-color: <%= hex %>; <%= hex === '#ffffff' ? 'border: 1px solid #ccc;' : '' %>">
                                                </div>

                                                <% }) %>
                                                    <!-- Transparent Option -->
                                                    <div class="color-option transparent-option"
                                                        data-color="transparent"
                                                        style="background: repeating-conic-gradient(#ccc 0% 25%, transparent 0% 50%) 50% / 10px 10px;">
                                                    </div>
                                        </div>
                                    </div>
                                    <!-- Download Button -->
                                    <!-- <button class="type-btn" onclick="handleMagicCodeUpdate('<%= channelId %>')">Update</button> -->

                                    <div class="app-actions">
                                        <select id="languageSwitcherApp" class="language-selector-select active"
                                            style="width: 100%; max-width: 280px;">
                                            <option value="en">English</option>
                                            <option value="de">Deutsch (German)</option>
                                            <option value="hu">Hungarian</option>
                                            <option value="ro">Romanian</option>
                                        </select>

                                        <select id="LogoSelect" class="language-selector-select active"
                                            style="width: 100%; max-width: 280px;">
                                            <option value="red">Red</option>
                                            <option value="white">White</option>

                                        </select>

                                        <button class="type-btn btn"
                                            onclick="downloadMagicCode('<%= channelId %>', '<%= sessionId %>', true)">Update</button>


                                        <button class="type-btn btn open-app-quiz" style="display: none;"
                                            onclick="window.open('/tvstation/comment/channels/<%= channelId %>/session/<%= sessionId %>/comment-play/?lang=en', '_blank')">Open</button>



                                    </div>
                                </div>
                            </div>
                        </div>
                        <% } %>

    </div>

    <script>
        document.getElementById("startChannelBtn")?.addEventListener("click", async () => {
            const pathParts = window.location.pathname.split("/");
            const channelId = pathParts[pathParts.indexOf("channels") + 1]; // Gets channel ID from URL

            if (!channelId) {
                showToast("Channel ID not found", "error");
                return;
            }

            const loader = document.getElementById("loader");
            loader.style.display = "flex"; // show loader

            try {
                const res = await fetch(`/tvstation/channels/${channelId}/toggle`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        isRunning: true,
                        typeOfRunning: "quiz"
                    })
                });

                const result = await res.json();

                if (result.type === "success") {
                    showToast(result.message || "Channel started", "success");
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message || "Failed to start channel", "error");
                }
            } catch (err) {
                console.error("Start error", err);
                showToast("Server error while starting channel", "error");
            }
            finally {
                loader.style.display = "none"; // hide loader after fetch is done
            }
        });
    </script>



    <script>
        const colorHexMapQuiz = {
            "#000000": "black",
            "#FFFFFF": "white",
            "#FF0093": "magenta",
            "#835EC7": "violet",
            "#00B760": "green",
            "#FC70BA": "pink",
            "#1C00FF": "blue",
            "#FF0000": "red",
            "#FFC62C": "orange",
            "#00AEEF": "cyan",
            "#FEFE00": "yellow",
            "#4CCED1": "turquoise"
        };

        const colorOptionsMap = {
            black: ["white", "pink", "orange", "yellow", "turquoise"],
            white: ["black", "green", "pink", "blue", "orange", "cyan", "yellow", "turquoise"],
            magenta: ["white", "cyan", "yellow", "turquoise"],
            violet: ["white", "cyan", "yellow", "turquoise"],
            green: ["white", "cyan", "yellow", "turquoise"],
            pink: ["white", "blue", "orange", "cyan", "yellow", "turquoise"],
            blue: ["white", "orange", "cyan", "yellow", "turquoise"],
            red: ["pink", "orange", "cyan", "yellow", "turquoise", "white"],
            orange: ["white", "pink", "cyan", "turquoise"],
            cyan: ["white", "black", "violet", "green", "pink", "blue", "orange", "yellow", "turquoise"],
            yellow: ["white", "black", "violet", "green", "pink", "blue", "orange", "cyan", "turquoise"],
            turquoise: ["white", "black", "violet", "green", "pink", "blue", "orange", "cyan", "yellow"]
        };

        const fgGrid = document.getElementById("foreground-color-grid-update");
        const bgGrid = document.getElementById("background-color-grid-update");
        const fgHexInput = document.getElementById("selectedFgHex");
        const bgHexInput = document.getElementById("selectedBgHex");

        function hexToName(hex) {
            return colorHexMapQuiz[hex.toUpperCase()] || null;
        }

        function clearActive(container) {
            container.querySelectorAll(".color-option").forEach(div => div.classList.remove("active"));
        }

        function rgbToHex(rgb) {
            const rgbArr = rgb.match(/\d+/g);
            if (!rgbArr || rgbArr.length < 3) return rgb;
            return "#" + rgbArr.map(val => parseInt(val).toString(16).padStart(2, '0')).join('').toUpperCase();
        }

        fgGrid.querySelectorAll(".color-option").forEach(fgDiv => {
            fgDiv.addEventListener("click", () => {
                clearActive(fgGrid);
                fgDiv.classList.add("active");

                const fgHex = rgbToHex(fgDiv.style.backgroundColor);
                const fgName = hexToName(fgHex);
                fgHexInput.value = fgHex;


                // Preserve transparent selection if already selected
                const transparentSelected = bgHexInput.value === "transparent";

                // Reset background selection
                clearActive(bgGrid);
                bgHexInput.value = "";

                // Show only allowed background options
                const allowed = colorOptionsMap[fgName] || [];
                bgGrid.querySelectorAll(".color-option").forEach(bgDiv => {
                    const bgHex = rgbToHex(bgDiv.style.backgroundColor);
                    const bgName = hexToName(bgHex);

                    if (bgDiv.dataset.color === "transparent") {
                        // ✅ Always show transparent
                        bgDiv.style.display = "inline-block";
                    } else {
                        bgDiv.style.display = (allowed.includes(bgName) && bgName !== fgName) ? "inline-block" : "none";
                    }



                });
            });
        });

        bgGrid.querySelectorAll(".color-option").forEach(bgDiv => {
            bgDiv.addEventListener("click", () => {
                if (bgDiv.style.display === "none") return;
                clearActive(bgGrid);
                bgDiv.classList.add("active");

                const bgDataColor = bgDiv.dataset.color;
                if (bgDataColor === "transparent") {
                    bgHexInput.value = "transparent";
                } else {
                    bgHexInput.value = rgbToHex(bgDiv.style.backgroundColor);
                }
            });
        });
    </script>

    <script>
        let UrlOfQR = ""
        async function downloadMagicCode(channelId, sessionId, isUpdate = false) {
            const fgHex = document.getElementById("selectedFgHex").value;
            const bgHex = document.getElementById("selectedBgHex").value;
            const lang = document.getElementById("languageSwitcherApp").value;
            const loader = document.getElementById("loader");
            loader.style.display = "flex"; // show loader

            let logo = document.getElementById("LogoSelect").value;

            let imageURL = `${window.location.origin}/images/logo1.jpg`;
            logoImage = `/images/logo1.jpg`

            if (logo == "white") {
                imageURL = `${window.location.origin}/images/Mc_white_logo.png`;
                logoImage = `/images/Mc_white_logo.png`
            }

            try {
                // Fetch QR data from server
                const res = await fetch(`/tvstation/channel/${channelId}/session/${sessionId}/qr`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ qrDotColor: fgHex, backgroundColor: bgHex, type: "comment", lang, logo: logoImage }),
                });


                const data = await res.json();
                if (!data.success) {
                    showToast(data.message || "Failed to fetch QR data", "error");
                    return;
                }

                if (data?.url) {
                    setOpenAppButtonsRedirect(data?.url)
                    return
                }

                const qrData = data.qr;
                const qrUrl = qrData.redirectUrl;
                // Helper to create and append QR code
                function createAndAppendQRCode(container, clearContainer = true) {
                    if (!container) return;

                    // If we need to clear the container entirely
                    if (clearContainer) {
                        container.innerHTML = "";
                    }


                    // Add qrName <p> before QR
                    if (qrData.qrName) {
                        const nameP = document.createElement("p");
                        nameP.textContent = qrData.qrName;
                        nameP.style.textAlign = "center";
                        nameP.style.margin = "0 0 6px 0";
                        nameP.style.fontWeight = "600";
                        // nameP.style.paddingTop = "10px"; // top padding
                        container.appendChild(nameP);
                    }


                    // Create QRCodeStyling instance
                    const qrCode = new QRCodeStyling({
                        width: 3000,
                        height: 3000,
                        type: "canvas",
                        data: qrUrl,
                        dotsOptions: {
                            color: qrData.qrDotColor || "#000000",
                            type: qrData.dotStyle || "square",
                            gradient: qrData.applyGradient === "linear" ? {
                                type: "linear",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrData.qrDotColor || "#000000" }
                                ]
                            } : qrData.applyGradient === "radial" ? {
                                type: "radial",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrData.qrDotColor || "#000000" }
                                ]
                            } : null
                        },
                        backgroundOptions: {
                            color: qrData.backgroundColor || "#FFFFFF"
                        },
                        cornersSquareOptions: {
                            type: qrData.cornerStyle || "square"
                        },
                        image: qrData?.logo || `${window.location.origin}/images/logo1.jpg`,
                        imageOptions: {
                            crossOrigin: "anonymous",
                            margin: 10
                        }
                    });


                    // Append QR to container
                    qrCode.append(container);
                    return qrCode; // 👈 return it
                }

                // --- Global container: clear everything ---
                createAndAppendQRCode(document.getElementById("qr-download-container"));

                const localContainer = document.getElementById("quiz-admin-actions-parent-div");
                if (localContainer) {
                    // Check if a previous QR wrapper exists
                    let wrapperDiv = localContainer.querySelector(".qr-download-container");
                    if (!wrapperDiv) {
                        // Create new wrapper if not found
                        wrapperDiv = document.createElement("div");
                        wrapperDiv.className = "qr-download-container"; // same class for symmetry
                        wrapperDiv.style.marginBottom = "10px"; // optional spacing
                        // Prepend at the beginning
                        localContainer.insertBefore(wrapperDiv, localContainer.firstChild);
                    } else {
                        // Clear previous QR inside existing wrapper
                        wrapperDiv.innerHTML = "";
                    }

                    // Append QR inside wrapper
                    createAndAppendQRCode(wrapperDiv, false);
                }
                setOpenAppButtonsRedirect(qrData.url);

                // ⛔ Early return for update (skip download)
                if (isUpdate) {
                    return;
                }

                const qrCode = createAndAppendQRCode(document.getElementById("qr-download-container"));

                // ⛔ Skip if QR not created
                if (!qrCode) return;

                setTimeout(() => {
                    qrCode.download({ name: qrData.qrName, extension: "png", width: 1600, height: 1600 });
                }, 500); // wait a little for QR to render
            } catch (error) {
                console.error("Download error:", error);
                showToast("Error downloading magic code", "error");
            }
            finally {
                loader.style.display = "none";
            }
        }
    </script>





    <script>
        const sessionId = "<%= sessionId %>";
        const qrType = "comment"; // or dynamically pass from backend
        async function loadMagicCodeOnPageLoad(sessionId, type) {
            const loader = document.getElementById("loader");
            loader.style.display = "flex"; // show loader
            document.getElementById("magicCodeSection").style.display = "none";
            try {
                const res = await fetch(`/tvstation/session/${sessionId}/qr/${type}`);
                const data = await res.json();

                // ✅ if backend says no QR linked
                if (data.isNoQrLinked) {
                    document.getElementById("magicCodeSection").style.display = "none";
                    document.getElementById("download-qr-code-btn").style.display = "none";
                    document.getElementById("unlinkBtn").style.display = "none";
                    document.getElementById("qr-download-container").style.display = "flex";
                    document.getElementById("linkWithMagicCodeBtn").textContent = "Send to a Magic Code";
                    document.getElementById("linkNewMagicCode").style.display = "inline-block";
                    document.getElementById("qr-download-container").innerHTML = `
<p style="margin-bottom: 1rem; text-align:center;">This Event has no Magic Code yet.</p>`;
                    // Disable all color options
                    document.querySelectorAll(
                        "#foreground-color-grid-update .color-option, #background-color-grid-update .color-option"
                    ).forEach(opt => opt.classList.add("disabled"));

                    // Disable LogoSelect dropdown
                    const logoSelect = document.getElementById("LogoSelect");
                    if (logoSelect) {
                        logoSelect.disabled = true;
                    }
                    console.warn("No QR linked to this session.");
                    setOpenAppButtonsRedirect(data.url)
                    return;
                }

                if (!data.success) {
                    console.error(data.message || "Failed to fetch QR details");
                    return;
                }



                const qrData = data.data.qr;
                const qrUrl = qrData.redirectUrl;
                const lang = qrData?.url ? new URL(qrData.url).searchParams.get("lang") || "en" : "en";
                document.getElementById("languageSwitcherApp").value = lang;

                // ✅ Update hidden inputs with saved values
                const fgHexInput = document.getElementById("selectedFgHex");
                const bgHexInput = document.getElementById("selectedBgHex");
                fgHexInput.value = qrData.qrDotColor || "#000000";
                bgHexInput.value = qrData.backgroundColor || "#FFFFFF";

                // ✅ Highlight selected colors in the grids
                function highlightSelected(container, hex) {
                    container.querySelectorAll(".color-option").forEach(div => {
                        div.classList.remove("active");
                        const bg = div.dataset.color === "transparent"
                            ? "transparent"
                            : rgbToHex(div.style.backgroundColor);
                        if (bg.toUpperCase() === hex.toUpperCase()) div.classList.add("active");
                    });
                }
                highlightSelected(document.getElementById("foreground-color-grid-update"), fgHexInput.value);
                highlightSelected(document.getElementById("background-color-grid-update"), bgHexInput.value);

                // Helper to create and append QR code
                function createAndAppendQRCode(container, clearContainer = true) {
                    if (!container) return;

                    // If we need to clear the container entirely
                    if (clearContainer) {
                        container.innerHTML = "";
                    }

                    // Make container a column flex with gap + top padding
                    container.style.display = "flex";
                    container.style.flexDirection = "column";
                    container.style.alignItems = "center";
                    container.style.gap = "8px";         // spacing between name & QR


                    // Add qrName <p> before QR
                    if (qrData.qrName) {
                        const nameP = document.createElement("p");
                        nameP.textContent = qrData.qrName;
                        nameP.style.textAlign = "center";
                        nameP.style.margin = "0 0 6px 0";
                        nameP.style.fontWeight = "600";
                        // nameP.style.paddingTop = "10px"; // top padding
                        container.appendChild(nameP);
                    }

                    // Create QRCodeStyling instance
                    const qrCode = new QRCodeStyling({
                        width: 3000,
                        height: 3000,
                        type: "canvas",
                        data: qrUrl,
                        dotsOptions: {
                            color: qrData.qrDotColor || "#000000",
                            type: qrData.dotStyle || "square",
                            gradient: qrData.applyGradient === "linear" ? {
                                type: "linear",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrData.qrDotColor || "#000000" }
                                ]
                            } : qrData.applyGradient === "radial" ? {
                                type: "radial",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrData.qrDotColor || "#000000" }
                                ]
                            } : null
                        },
                        backgroundOptions: {
                            color: qrData.backgroundColor || "#FFFFFF"
                        },
                        cornersSquareOptions: {
                            type: qrData.cornerStyle || "square"
                        },
                        image: qrData?.logo || `${window.location.origin}/images/logo1.jpg`,
                        imageOptions: {
                            crossOrigin: "anonymous",
                            margin: 10
                        }
                    });

                    // Append QR to container
                    qrCode.append(container);
                }

                // --- Global container: clear everything ---
                createAndAppendQRCode(document.getElementById("qr-download-container"));

                const localContainer = document.getElementById("quiz-admin-actions-parent-div");
                if (localContainer) {
                    // Check if a previous QR wrapper exists
                    let wrapperDiv = localContainer.querySelector(".qr-download-container");
                    if (!wrapperDiv) {
                        // Create new wrapper if not found
                        wrapperDiv = document.createElement("div");
                        wrapperDiv.className = "qr-download-container"; // same class for symmetry
                        wrapperDiv.style.marginBottom = "10px"; // optional spacing
                        // Prepend at the beginning
                        localContainer.insertBefore(wrapperDiv, localContainer.firstChild);
                    } else {
                        // Clear previous QR inside existing wrapper
                        wrapperDiv.innerHTML = "";
                    }

                    // Append QR inside wrapper
                    createAndAppendQRCode(wrapperDiv, false);
                }


                setOpenAppButtonsRedirect(qrData.url);

            } catch (error) {
                console.error("Error loading magic code:", error);
            } finally {
                loader.style.display = "none";
            }
        }

        document.addEventListener("click", async (e) => {
            if (e.target && e.target.id === "unlinkBtn") {
                if (!confirm("Are you sure you want to unlink the Magic Code?")) return;

                const loader = document.getElementById("loader");
                loader.style.display = "flex";

                try {
                    const res = await fetch(
                        `/tvstation/unlink-magic-code?sessionId=${sessionId}&type=comment`,
                        {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        }
                    );
                    const data = await res.json();

                    if (res.ok && data.type === "success") {
                        showToast("Magic Code unlinked successfully", "success");
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showToast(data.message || "Failed to unlink", "error");
                    }
                } catch (err) {
                    console.error("Unlink failed", err);
                    showToast("Server error while unlinking Magic Code", "error");
                } finally {
                    loader.style.display = "none";
                }
            }
        });




        document.addEventListener("DOMContentLoaded", () => {
            const toggleBtn = document.getElementById("toggleMagicUpdateBtn");
            const magicSection = document.getElementById("magicCodeSection");

            if (toggleBtn && magicSection) {
                toggleBtn.addEventListener("click", () => {
                    if (magicSection.style.display === "none" || magicSection.style.display === "") {
                        magicSection.style.display = "block";
                        toggleBtn.textContent = "Hide Magic Code";
                    } else {
                        magicSection.style.display = "none";
                        toggleBtn.textContent = "Open Magic Code";
                    }
                });
            }

            loadMagicCodeOnPageLoad(sessionId, qrType);
        });

        function setOpenAppButtonsRedirect(qrUrl) {
            document.querySelectorAll(".open-app-quiz").forEach(btn => {
                btn.onclick = () => {
                    if (!qrUrl) return alert("No QR URL available yet");
                    window.open(qrUrl, "_blank");
                };
            });

            // Similarly, set the copy button(s) if you want
            document.querySelectorAll(".copy-qr-link-btn").forEach(copyBtn => {
                copyBtn.dataset.link = qrUrl;
            });
        }
        document.addEventListener("click", async (e) => {
            if (e.target && e.target.classList.contains("copy-qr-link-btn")) {
                const btn = e.target;
                const link = btn.dataset.link;

                if (!link) {
                    showToast("No link available to copy", "error");
                    return;
                }

                try {
                    await navigator.clipboard.writeText(link);
                    showToast("Link copied to clipboard!", "success");
                } catch (err) {
                    console.error("Copy failed", err);
                    showToast("Failed to copy link", "error");
                }
            }
        });
    </script>





</body>

</html>