<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Magic Code Cards</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="/css/qr-gallery-new.css" rel="stylesheet">
</head>

<body>
    <div class="container-qr-custom">
        <span style="font-family: Poppins;
        font-weight: 600;
        font-size: 20px;
        margin-bottom: 10px;
        line-height: 20px;" data-translate="my_magic_codes">My Magic Codes</span>

        <!-- Filter Bar -->
        <div class="filter-bar">
            <!-- Search Text -->
            <input type="text" id="searchInput" placeholder="Search Magic Codes..." />

            <!-- Sort -->
            <select id="sortSelect">
                <option value="dateAsc">Sort by Date ↑</option>
                <option value="dateDesc">Sort by Date ↓</option>
                <option value="alphaAsc">Sort by Name A → Z</option>
                <option value="alphaDesc">Sort by Name Z → A</option>
            </select>

            <!-- Tags Multi Select -->
            <div class="multi-dropdown" id="multiDropdown">
                <button type="button" id="tagsDropdownBtn">Select Tags ▾</button>
                <div class="dropdown-content" id="tagsDropdownContent">
                    <% if (user && user.tags && user.tags.length> 0) { %>
                        <% user.tags.forEach(function(tag) { %>
                            <label>
                                <input type="checkbox" value="<%= tag %>">
                                <%= tag %>
                            </label>
                            <% }) %>
                                <% } else { %>
                                    <p style="padding:6px; font-size: 13px; color:#555;">You don’t have any tags yet.
                                    </p>
                                    <% } %>

                                        <!-- Create new tag inside dropdown -->
                                        <div class="create-tag-inline">
                                            <input type="text" name="newTag" placeholder="Enter new tag..." />
                                            <button type="submit" name="createTagBtn">+</button>
                                        </div>
                </div>
            </div>


            <!-- Search Button -->

            <button class="btn" style="margin: 0px;" id="filter-search-btn"><i class="fas fa-search"></i></button>
            <button class="btn" style="margin: 0px;" id="filter-clear-btn" onclick="window.location.href='/magiccode'">
                <i class="fas fa-times"></i>
            </button>


        </div>
        <!-- Create New Tag Section (Separate from filter bar) -->
        <!-- Create New Tag Section -->
        <!-- <div class="create-tag-section" s>
            <input type="text" name="newTag" placeholder="Enter new tag..." />
            <button type="submit" name="createTagBtn">Create Tag</button>
        </div> -->



        <div class="grid">
            <% if (qrCodes.length> 0) { %>
                <% qrCodes.forEach(function(qrCode) { %>
                    <div class="card" id="showqrcards">
                        <p class="card-title">
                            <%= qrCode.qrName %>
                        </p>
                        <a class="qr-code" id="qr-container-<%= qrCode._id %>"
                            href="/dashboard?magiccode=<%= qrCode._id %>"></a>
                        <div class="button-group">
                            <button class="icon-button" title="Edit" style="position: relative;top: 3px;">
                                <a href="/dashboard?magiccode=<%= qrCode._id %>">
                                    <img src="/vuesax-linear-edit.svg" alt="Edit">
                                </a>
                            </button>
                            <% if (!qrCode.isFirstQr) { %>
                                <button class="icon-button" title="Make It Free"
                                    onclick="makeItFree('<%= qrCode._id %>')">
                                    <img src="\images\free.png" alt="Make It Free" class="action-icon"
                                        style="width: 50px;" />
                                </button>
                                <% } %>

                                    <button class="icon-button" title="Delete"
                                        onclick="deleteQRCode('<%= qrCode._id %>')">
                                        <img src="/vuesax-linear-trash.svg" alt="Delete">
                                    </button>
                        </div>
                    </div>
                    <% }) %>
                        <% } else { %>
                            <p id="NoQR">No Magic codes found.</p>
                            <% } %>
        </div>
    </div>

    <!-- <script src="/js/api-calls.js"></script> -->
    <script src="/js/qr-gallery.js"></script>
    <script>
        const qrCodesMap = {};

        function showQrCodes(qrCodes) {
            qrCodes.forEach((qrCodeData) => {
                const qrContainer = document.getElementById(`qr-container-${qrCodeData._id}`);
                let logoUrl = qrCodeData.logo ? `${window.location.protocol}//${window.location.host}/${qrCodeData.logo}` : "";


                if (qrContainer) {
                    const qrCode = new QRCodeStyling({
                        width: 3000,
                        height: 3000,
                        type: "canvas",
                        data: `${window.location.protocol}//${window.location.host}/${qrCodeData.code}`,
                        dotsOptions: {
                            color: qrCodeData.qrDotColor || "#000000",
                            type: qrCodeData.dotStyle || "square",
                            gradient: qrCodeData.applyGradient === "linear" ? {
                                type: "linear",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrCodeData.qrDotColor || "#000000" }
                                ]
                            } : qrCodeData.applyGradient === "radial" ? {
                                type: "radial",
                                colorStops: [
                                    { offset: 0, color: "#ff0000" },
                                    { offset: 1, color: qrCodeData.qrDotColor || "#000000" }
                                ]
                            } : null
                        },
                        backgroundOptions: {
                            color: qrCodeData.backgroundColor || "#ffffff"
                        },
                        cornersSquareOptions: {
                            type: qrCodeData.cornerStyle || "square"
                        },
                        image: logoUrl,
                        imageOptions: {
                            crossOrigin: "anonymous",
                            margin: 10
                        }
                    });



                    // Clear existing content to avoid duplicates
                    qrContainer.innerHTML = "";

                    // Create wrapper to hold QR and optional badge
                    const wrapper = document.createElement("div");
                    wrapper.style.position = "relative";
                    wrapper.style.display = "inline-block";

                    // Create a div to hold the QR code canvas
                    const qrCanvasDiv = document.createElement("div");
                    wrapper.appendChild(qrCanvasDiv);
                    if (qrCodeData.isFirstQr) {
                        const cardElement = qrContainer.closest(".card");
                        if (cardElement && !cardElement.querySelector(".ribbon-triangle")) {
                            const ribbon = document.createElement("div");
                            ribbon.className = "ribbon-triangle";

                            const text = document.createElement("span");
                            text.textContent = "FREE";

                            ribbon.appendChild(text);
                            cardElement.appendChild(ribbon);
                        }
                    }

                    qrCode.append(qrCanvasDiv);
                    qrContainer.appendChild(wrapper);
                    qrCodesMap[qrCodeData._id] = qrCode;

                }
            });
        }

        function downloadQRCodeShowed(qrCodeId) {
            const qrCode = qrCodesMap[qrCodeId];
            if (qrCode) {
                qrCode.download({ name: "qr-code", extension: "png", width: 1600, height: 1600 });
            }
        }

        // Initialize QR codes
        const qrCodesFromServer = <%- JSON.stringify(qrCodes) %>;
        showQrCodes(qrCodesFromServer);



        const multiDropdown = document.getElementById("multiDropdown");
        const dropdownBtn = document.getElementById("tagsDropdownBtn");

        dropdownBtn.addEventListener("click", () => {
            multiDropdown.classList.toggle("open");
        });

        // Close if clicked outside
        document.addEventListener("click", (e) => {
            if (!multiDropdown.contains(e.target)) {
                multiDropdown.classList.remove("open");
            }
        });

        // Show selected tags in button
        multiDropdown.querySelectorAll("input[type=checkbox]").forEach(cb => {
            cb.addEventListener("change", () => {
                const selected = [...multiDropdown.querySelectorAll("input:checked")]
                    .map(c => c.value);

                if (selected.length === 0) {
                    dropdownBtn.textContent = "Select Tags ▾";
                } else if (selected.length <= 2) {
                    // Show all if 1 or 2 selected
                    dropdownBtn.textContent = selected.join(", ");
                } else {
                    // Show first 2 and then add "..."
                    dropdownBtn.textContent = `${selected.slice(0, 2).join(", ")}... (${selected.length})`;
                }
            });
        });

        // --- Create Tag Integration ---
        document.addEventListener("click", async (e) => {
            if (e.target && e.target.name === "createTagBtn") {
                const input = document.querySelector(".create-tag-inline input[name='newTag']");
                const newTag = input.value.trim();
                if (!newTag) {
                    showToast("Please enter a tag", "error");
                    return;
                }

                // Optional: show loader (if you have one)
                const loader = document.getElementById("loader");
                if (loader) loader.style.display = "flex";

                try {
                    const res = await fetch("/create-tag", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ tag: newTag })
                    });
                    const data = await res.json();

                    if (res.ok && data.success) {
                        input.value = ""; // clear input
                        showToast("Tag created successfully", "success");
                        // Dynamically append new tag checkbox inside dropdown
                        const newLabel = document.createElement("label");
                        newLabel.innerHTML = `
      <input type="checkbox" value="${newTag}">
      ${newTag}
    `;
                        const dropdownContent = document.getElementById("tagsDropdownContent");
                        dropdownContent.insertBefore(newLabel, dropdownContent.querySelector(".create-tag-inline"));
                    } else {
                        showToast(data.message || "Failed to create tag", "error");
                    }
                } catch (err) {
                    console.error("Error creating tag:", err);
                    showToast("Server error while creating tag", "error");
                } finally {
                    if (loader) loader.style.display = "none";
                }
            }
        });


        // Handle Search button click
        document.querySelector(".filter-bar .btn").addEventListener("click", () => {
            const searchText = document.getElementById("searchInput").value.trim();
            const sortValue = document.getElementById("sortSelect").value;

            const selectedTags = [...multiDropdown.querySelectorAll("input:checked")]
                .map(c => c.value);

            // If nothing is selected, show toast
            if (!searchText && selectedTags.length === 0 && !sortValue) {
                showToast("Please enter search text or select tags/sort option", "error");
                return; // Stop further execution
            }

            // Build query string
            const params = new URLSearchParams();
            if (searchText) params.append("search", searchText);
            if (selectedTags.length) params.append("tags", selectedTags.join(","));
            if (sortValue) params.append("sortBy", sortValue);

            // Redirect
            const queryString = params.toString();
            window.location.href = queryString ? `/magiccode?${queryString}` : `/magiccode`;



        });


        // --- Restore filter values from query string ---
        window.addEventListener("DOMContentLoaded", () => {
            const params = new URLSearchParams(window.location.search);

            // Restore search text
            const searchInput = document.getElementById("searchInput");
            if (params.has("search")) {
                searchInput.value = params.get("search");
            }

            // Restore sort
            const sortSelect = document.getElementById("sortSelect");
            if (params.has("sortBy")) {
                sortSelect.value = params.get("sortBy");
            }

            // Restore tags
            const selectedTags = params.get("tags") ? params.get("tags").split(",") : [];
            const checkboxes = document.querySelectorAll("#tagsDropdownContent input[type=checkbox]");
            checkboxes.forEach(cb => {
                if (selectedTags.includes(cb.value)) {
                    cb.checked = true;
                }
            });

            // Update dropdown button text accordingly
            const dropdownBtn = document.getElementById("tagsDropdownBtn");
            if (selectedTags.length === 0) {
                dropdownBtn.textContent = "Select Tags ▾";
            } else if (selectedTags.length <= 2) {
                dropdownBtn.textContent = selectedTags.join(", ");
            } else {
                dropdownBtn.textContent = `${selectedTags.slice(0, 2).join(", ")}... (${selectedTags.length})`;
            }
        });


    </script>
</body>


</html>