<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="/css/wallet.css" rel="stylesheet">
    <title>Wallet Balance</title>
</head>

<body>
    <div id="theme-popup-get-paid" class="popup-overlay" style="display: none;">
        <div class="popup-content" style="position: relative;">
            <span id="close-popup-get-paid" style="
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 25px;
            cursor: pointer;
        ">&times;</span>
            <p>Please Enter Details</p>
            <form>
                <!-- Account Number -->
                <div class="form-group" style="margin-bottom: 24px;">
                    <input type="text" id="account-number" placeholder="Enter Account Number"
                        value="<%= typeof user !== 'undefined' && user.accountNo ? user.accountNo : '' %>">
                </div>


                <!-- Remarks -->
                <div class=" form-group" style="margin-bottom: 24px;">
                    <input type="text" id="remarks" placeholder="Enter Remarks">
                </div>

                <!-- Purpose -->
                <div class="form-group" style="margin-bottom: 24px;">
                    <input type="text" id="purpose" placeholder="Enter Purpose">
                </div>

                <button id="popup-ok-btn-get-paid" type="button">Get Paid</button>
            </form>
        </div>
    </div>

    <div class="container-custom-wallet">
        <span class="label">Total Wallet Balance</span>
        <div class="wallet-balance" id="walletBalance">
            <%= totalCommissionBalance %>&nbsp;CHF
        </div>
        <% if (totalCommissionBalance> 0) { %>
            <button id="getPaidBtn">Get Paid</button>
            <% } %>
    </div>

    <div class="transaction-bar">
        <h3 class="transaction-heading">Transaction History</h3>
        <div class="transaction-list" id="transactionList">
            <% if (transactionHistory && transactionHistory.length> 0) { %>
                <% transactionHistory.forEach(tx=> {
                    const formattedDate = new Date(tx.createdAt).toLocaleString("en-GB", {
                    day: '2-digit', month: '2-digit', year: 'numeric',
                    hour: '2-digit', minute: '2-digit'
                    });
                    %>
                    <div class="transaction-item">
                        <span class="transaction-amount">
                            <%= tx.amount.toFixed(2) %> CHF
                        </span>
                        <span class="transaction-type">
                            <%= tx.type==='admin_payment' ? 'Paid' : 'Earned' %>
                        </span>
                        <span class="transaction-date">
                            <%= formattedDate %>
                        </span>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <div class="transaction-item">
                                <span>No transactions available.</span>
                            </div>
                            <% } %>
        </div>

        <% if (hasMore) { %>
            <button id="loadMoreBtn">Load More</button>
            <% } %>
    </div>


</body>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const popup = document.getElementById("theme-popup-get-paid");
        const getPaidBtn = document.getElementById("getPaidBtn");
        const closeBtn = document.getElementById("close-popup-get-paid");
        const okBtn = document.getElementById("popup-ok-btn-get-paid");

        const accountInput = document.getElementById("account-number");
        const remarksInput = document.getElementById("remarks");
        const purposeInput = document.getElementById("purpose");

        // Create spinner element
        const spinner = document.createElement("span");
        spinner.classList.add("spinner");
        spinner.style.display = "none";
        spinner.style.marginRight = "8px";
        okBtn.prepend(spinner);

        // Show popup on Get Paid button click
        if (getPaidBtn) {
            getPaidBtn.addEventListener("click", (e) => {
                e.preventDefault();
                popup.style.display = "flex";
            });
        }

        // Close popup
        if (closeBtn) {
            closeBtn.addEventListener("click", (e) => {
                e.preventDefault();
                popup.style.display = "none";
            });
        }

        // Handle "Get Paid" form submission
        okBtn.addEventListener("click", async (event) => {
            event.preventDefault();

            const accountNumber = accountInput.value.trim();
            const remarks = remarksInput.value.trim();
            const purpose = purposeInput.value.trim();

            if (!accountNumber) {
                showToast("Account number is required.", "error");
                return;
            }

            if (!purpose) {
                showToast("Purpose is required.", "error");
                return;
            }

            // Disable button and show spinner
            okBtn.disabled = true;
            spinner.style.display = "inline-block";
            okBtn.textContent = "Processing...";
            okBtn.prepend(spinner);

            try {
                const response = await fetch("/send-admin-email", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ accountNumber, remarks, purpose }),
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message || "Payment initiated!", "success");
                    popup.style.display = "none";
                    remarksInput.value = "";
                    purposeInput.value = "";
                } else {
                    showToast(result.message || "Something went wrong!", "error");
                }
            } catch (err) {
                console.error(err);
                showToast("Network error. Please try again.", "error");
            }

            // Reset button and spinner
            spinner.style.display = "none";
            okBtn.disabled = false;
            okBtn.textContent = "Get Paid";
            okBtn.prepend(spinner);
        });
    });


    let skipCount = <%= transactionHistory.length %>;

    const loadMoreBtn = document.getElementById("loadMoreBtn");
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", async () => {
            try {
                loadMoreBtn.disabled = true;
                loadMoreBtn.textContent = "Loading...";

                const response = await fetch(`/walletstatus?skip=${skipCount}&limit=5`, {
                    headers: {
                        Accept: "application/json"
                    }
                });
                const data = await response.json();

                data.transactionHistory.forEach((tx) => {
                    const item = document.createElement("div");
                    item.className = "transaction-item";

                    // Format date in 'dd/mm/yyyy, hh:mm' like `en-GB` locale
                    const formattedDate = new Date(tx.createdAt).toLocaleString("en-GB", {
                        day: '2-digit', month: '2-digit', year: 'numeric',
                        hour: '2-digit', minute: '2-digit'
                    });

                    item.innerHTML = `
        <span class="transaction-amount">
            ${Number(tx.amount).toFixed(2)} CHF
        </span>
        <span class="transaction-type">
            ${tx.type === 'admin_payment' ? 'Paid' : 'Earned'}
        </span>
        <span class="transaction-date">
            ${formattedDate}
        </span>
    `;

                    document.getElementById("transactionList").appendChild(item);
                });


                skipCount += data.transactionHistory.length;

                if (!data.hasMore) {
                    loadMoreBtn.remove();
                } else {
                    loadMoreBtn.disabled = false;
                    loadMoreBtn.textContent = "Load More";
                }
            } catch (err) {
                console.error("Load more failed", err);
            }
        });
    }


</script>



</html>